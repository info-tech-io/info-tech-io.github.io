name: TEST - Cache Bug Reproduction (Issue #14)

on:
  workflow_dispatch:
    inputs:
      use_cache:
        description: 'Enable cache (true = bug expected, false = workaround)'
        type: boolean
        default: true
      content_source:
        description: 'Content source (info-tech or hugo-templates)'
        type: choice
        options:
          - info-tech
          - hugo-templates
        default: info-tech

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "test-cache-bug"
  cancel-in-progress: true

jobs:
  test-cache-bug:
    runs-on: ubuntu-latest
    steps:
      - name: Test Configuration
        run: |
          echo "üß™ Cache Bug Reproduction Test"
          echo "Cache enabled: ${{ github.event.inputs.use_cache }}"
          echo "Content source: ${{ github.event.inputs.content_source }}"

      - name: Checkout hub repository
        uses: actions/checkout@v4

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: '0.148.0'
          extended: true

      - name: Checkout hugo-templates
        uses: actions/checkout@v4
        with:
          repository: info-tech-io/hugo-templates
          token: ${{ secrets.PAT_TOKEN }}
          path: hugo-templates

      - name: Prepare build environment
        run: |
          echo "üèóÔ∏è Preparing test environment..."
          rm -rf build-output
          mkdir -p build-output

          cd hugo-templates
          git submodule update --init --recursive
          npm install || echo "npm install failed, continuing..."
          cd ..

      - name: Build Corporate Site (Testing Cache)
        run: |
          echo "üè¢ Building site for cache test..."
          echo "Content source: ${{ github.event.inputs.content_source }}"

          cd hugo-templates
          chmod +x scripts/build.sh

          # Setup content based on source
          if [ "${{ github.event.inputs.content_source }}" = "info-tech" ]; then
            echo "üì¶ Using info-tech corporate content (14 MD files, ~39 HTML pages)"
            git clone https://github.com/info-tech-io/info-tech.git ../content-repo
            cp -r ../content-repo/docs ./module-content
            CONFIG_FILE="./module-content/module.json"
            CONTENT_DIR="./module-content/content"
          else
            echo "üì¶ Using hugo-templates documentation (64 MD files, more HTML pages)"
            # Use hugo-templates own docs
            CONFIG_FILE="./docs/module.json"
            CONTENT_DIR="./docs"
          fi

          # Build WITH or WITHOUT cache based on input
          if [ "${{ github.event.inputs.use_cache }}" = "false" ]; then
            echo "‚ö†Ô∏è  Building with --no-cache (workaround)"
            scripts/build.sh \
              --template corporate \
              --content "$CONTENT_DIR" \
              --output ../build-output \
              --force \
              --no-cache \
              --verbose
          else
            echo "üêõ Building WITH cache enabled (bug expected if different content)"
            scripts/build.sh \
              --template corporate \
              --content "$CONTENT_DIR" \
              --output ../build-output \
              --force \
              --verbose
          fi
          cd ..

      - name: Analyze Build Results
        run: |
          echo "üìä Build Analysis:"
          echo "================="

          TOTAL_FILES=$(find build-output -type f | wc -l)
          HTML_PAGES=$(find build-output -name "*.html" | wc -l)
          TOTAL_SIZE=$(du -sh build-output | cut -f1)

          echo "üì¶ Total files: $TOTAL_FILES"
          echo "üìÑ HTML pages: $HTML_PAGES"
          echo "üíæ Total size: $TOTAL_SIZE"
          echo ""

          # Expected results (from Issue #14)
          EXPECTED_PAGES=370
          MIN_EXPECTED_SIZE_KB=9000  # ~9MB = 9000KB

          TOTAL_SIZE_KB=$(du -sk build-output | cut -f1)

          echo "üéØ Expected: ~$EXPECTED_PAGES pages, ~9-10MB"
          echo "üìå Actual:   $HTML_PAGES pages, ${TOTAL_SIZE}B"
          echo ""

          if [ "$HTML_PAGES" -lt 10 ] || [ "$TOTAL_SIZE_KB" -lt 1000 ]; then
            echo "üêõ BUG CONFIRMED:"
            echo "   Pages: $HTML_PAGES (expected ~$EXPECTED_PAGES)"
            echo "   Size: ${TOTAL_SIZE}B (expected ~9-10MB)"
            echo "   Cache likely returned template-only content"
            exit 1
          elif [ "$HTML_PAGES" -ge 300 ]; then
            echo "‚úÖ BUILD SUCCESSFUL:"
            echo "   Pages: $HTML_PAGES (expected ~$EXPECTED_PAGES)"
            echo "   Size: ${TOTAL_SIZE}B (expected ~9-10MB)"
            echo "   Content built correctly"
          else
            echo "‚ö†Ô∏è  UNEXPECTED RESULT:"
            echo "   Pages: $HTML_PAGES (expected ~$EXPECTED_PAGES)"
            echo "   Needs investigation"
            exit 1
          fi

      - name: Sample Content Check
        run: |
          echo "üîç Checking sample pages:"
          if [ -f "build-output/index.html" ]; then
            echo "‚úÖ index.html exists"
            grep -o "<title>.*</title>" build-output/index.html | head -1 || echo "No title found"
          else
            echo "‚ùå index.html missing"
          fi

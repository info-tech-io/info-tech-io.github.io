name: Deploy InfoTech.io Documentation Federation

on:
  repository_dispatch:
    types:
      - quiz-docs-updated
      - hugo-templates-docs-updated
      - web-terminal-docs-updated
      - cli-docs-updated
  workflow_dispatch:
    inputs:
      product:
        description: 'Build specific product (or "all")'
        required: false
        default: 'all'
      debug:
        description: 'Enable debug mode'
        type: boolean
        default: false

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages-docs"
  cancel-in-progress: false

jobs:
  deploy-docs:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      # ==========================================
      # Task 2: Download Current Pages State
      # ==========================================
      - name: Download Current GitHub Pages State
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: current-site
        continue-on-error: true

      - name: Validate Current State
        run: |
          echo "üì¶ Checking current site state..."

          if [ -d "current-site" ]; then
            echo "‚úÖ Current site downloaded"
            echo "üìä Current site size: $(du -sh current-site | cut -f1)"

            # Check corporate site exists
            if [ -f "current-site/index.html" ]; then
              echo "‚úÖ Corporate site found"
            else
              echo "‚ö†Ô∏è  Corporate site missing - may be first deployment"
            fi

            # Check existing docs
            if [ -d "current-site/docs" ]; then
              echo "üìö Existing docs: $(find current-site/docs -type d -maxdepth 1 | wc -l) products"
            fi
          else
            echo "‚ö†Ô∏è  No existing site found (fresh deployment)"
            mkdir -p current-site
          fi

      # ==========================================
      # Task 3: Setup Build Environment
      # ==========================================
      - name: Checkout Hub Repository (for configs)
        uses: actions/checkout@v4
        with:
          path: hub-repo

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: '0.148.0'
          extended: true

      - name: Clone Hugo Templates Framework
        uses: actions/checkout@v4
        with:
          repository: info-tech-io/hugo-templates
          token: ${{ secrets.PAT_TOKEN }}
          path: hugo-templates
          submodules: recursive
          ref: main

      - name: Prepare Hugo Templates
        run: |
          echo "üîß Preparing Hugo Templates framework..."
          cd hugo-templates
          git submodule update --init --recursive
          npm install || echo "‚ö†Ô∏è  npm install failed, continuing..."
          chmod +x scripts/build.sh scripts/federated-build.sh
          cd ..
          echo "‚úÖ Hugo Templates ready"

      - name: Setup Git Credentials for Repository Cloning
        run: |
          echo "üîë Configuring Git credentials for federated-build.sh..."
          git config --global url."https://${{ secrets.PAT_TOKEN }}@github.com/".insteadOf "https://github.com/"
          echo "‚úÖ Git credentials configured"

      # ==========================================
      # Task 4: Build All Product Documentation
      # ==========================================
      - name: Build All Product Documentation
        run: |
          echo "üèóÔ∏è Building all product documentation..."

          cd hugo-templates

          # Use federated-build.sh with documentation-modules.json
          # Always use --debug for detailed error logs
          ./scripts/federated-build.sh \
            --config=../hub-repo/configs/documentation-modules.json \
            --output=../docs-build \
            --verbose \
            --debug

          cd ..
          echo "‚úÖ All documentation built"

      - name: Validate Build Output
        run: |
          echo "üîç Validating documentation builds..."

          products=("quiz" "hugo-templates" "web-terminal" "info-tech-cli")

          for product in "${products[@]}"; do
            if [ -d "docs-build/docs/$product" ]; then
              html_count=$(find "docs-build/docs/$product" -name '*.html' | wc -l)
              echo "  ‚úÖ $product: $html_count HTML files"

              # Check for index.html
              if [ ! -f "docs-build/docs/$product/index.html" ]; then
                echo "  ‚ö†Ô∏è  Warning: $product missing index.html"
              fi
            else
              echo "  ‚ùå $product: Build output missing"
              exit 1
            fi
          done

          echo "‚úÖ All documentation validated"

      # ==========================================
      # Task 5: Create Documentation Hub
      # ==========================================
      - name: Create Documentation Hub
        run: |
          echo "üè† Creating documentation hub..."

          # This will be expanded in Stage 3
          # For now, create placeholder
          mkdir -p docs-build/docs

          cat > docs-build/docs/index.html <<'EOF'
          <!DOCTYPE html>
          <html lang="en">
            <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Documentation Hub - InfoTech.io</title>
              <style>
                * { margin: 0; padding: 0; box-sizing: border-box; }
                body {
                  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                  line-height: 1.6;
                  color: #14171a;
                  background: #ffffff;
                }
                header {
                  background: #14171a;
                  color: white;
                  padding: 2rem;
                  text-align: center;
                }
                h1 { font-size: 2.5rem; margin-bottom: 0.5rem; }
                .subtitle { color: rgba(255,255,255,0.8); font-size: 1.1rem; }
                .container { max-width: 1200px; margin: 3rem auto; padding: 0 2rem; }
                .products { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 2rem; }
                .card {
                  background: #f7f9fa;
                  border: 1px solid #e1e8ed;
                  border-radius: 12px;
                  padding: 2rem;
                  transition: transform 0.3s, box-shadow 0.3s;
                  text-decoration: none;
                  color: inherit;
                  display: block;
                }
                .card:hover { transform: translateY(-4px); box-shadow: 0 8px 24px rgba(0,0,0,0.12); }
                .icon { font-size: 3rem; margin-bottom: 1rem; }
                .card h2 { font-size: 1.5rem; margin-bottom: 0.5rem; color: #14171a; }
                .card p { color: #657786; margin-bottom: 1rem; }
                .link { color: #1da1f2; font-weight: 500; text-decoration: none; }
                .back { display: inline-block; margin: 2rem 0; color: #1da1f2; text-decoration: none; }
              </style>
            </head>
            <body>
              <header>
                <h1>üìö Documentation Hub</h1>
                <p class="subtitle">Comprehensive documentation for all InfoTech.io products</p>
              </header>
              <main class="container">
                <div class="products">
                  <a href="/docs/quiz/" class="card">
                    <div class="icon">üéØ</div>
                    <h2>Quiz Engine</h2>
                    <p>Interactive quiz and assessment platform for creating engaging educational content</p>
                    <span class="link">View Documentation ‚Üí</span>
                  </a>
                  <a href="/docs/hugo-templates/" class="card">
                    <div class="icon">üèóÔ∏è</div>
                    <h2>Hugo Templates Framework</h2>
                    <p>Powerful Hugo-based static site generation framework with federated build capabilities</p>
                    <span class="link">View Documentation ‚Üí</span>
                  </a>
                  <a href="/docs/web-terminal/" class="card">
                    <div class="icon">üíª</div>
                    <h2>Web Terminal</h2>
                    <p>Browser-based terminal emulator for interactive command-line experiences</p>
                    <span class="link">View Documentation ‚Üí</span>
                  </a>
                  <a href="/docs/info-tech-cli/" class="card">
                    <div class="icon">‚ö°</div>
                    <h2>InfoTech CLI</h2>
                    <p>Command-line interface for managing InfoTech.io projects and workflows</p>
                    <span class="link">View Documentation ‚Üí</span>
                  </a>
                </div>
                <a href="/" class="back">‚Üê Back to Main Site</a>
              </main>
            </body>
          </html>
          EOF

          echo "‚úÖ Documentation hub created"

      # ==========================================
      # Task 6: Selective Merge (Preserve Corporate Site)
      # ==========================================
      - name: Merge Documentation (Preserve Corporate Site)
        run: |
          echo "üîÑ Merging documentation, preserving corporate site..."

          # Backup corporate root if exists
          if [ -d "current-site" ] && [ -f "current-site/index.html" ]; then
            echo "üíæ Corporate site exists, will be preserved"
          fi

          # Create /docs/ directory in current site
          mkdir -p current-site/docs

          # Sync only /docs/ from build output
          echo "üìã Syncing documentation to /docs/..."
          rsync -av --delete docs-build/docs/ current-site/docs/

          echo "‚úÖ Merge complete"

      - name: Verify Merge Result
        run: |
          echo "üìä Final site structure verification:"
          echo ""
          echo "=== Corporate site (root) ==="
          if [ -f "current-site/index.html" ]; then
            echo "‚úÖ Corporate index.html preserved"
          else
            echo "‚ö†Ô∏è  Corporate index.html missing"
          fi

          echo ""
          echo "=== Documentation (/docs/) ==="
          products=("quiz" "hugo-templates" "web-terminal" "info-tech-cli")
          for product in "${products[@]}"; do
            if [ -d "current-site/docs/$product" ]; then
              files=$(find "current-site/docs/$product" -type f | wc -l)
              echo "  ‚úÖ $product: $files files"
            else
              echo "  ‚ùå $product: Missing"
            fi
          done

          echo ""
          echo "=== Documentation Hub ==="
          if [ -f "current-site/docs/index.html" ]; then
            echo "‚úÖ Hub index.html present"
          else
            echo "‚ùå Hub index.html missing"
          fi

          echo ""
          echo "üì¶ Total site size: $(du -sh current-site | cut -f1)"

      # ==========================================
      # Task 7: Deploy to GitHub Pages
      # ==========================================
      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: current-site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Deployment Success
        run: |
          echo "‚úÖ Documentation federation deployed successfully!"
          echo "üåê URL: ${{ steps.deployment.outputs.page_url }}"
          echo ""
          echo "üìã Deployment Summary:"
          echo "  - Corporate site: Preserved ‚úÖ"
          echo "  - Documentation: Updated ‚úÖ"
          echo "  - Products deployed: quiz, hugo-templates, web-terminal, info-tech-cli"
          echo "  - Deployment mode: Incremental (docs only)"

      # ==========================================
      # Task 8: Error Handling
      # ==========================================
      - name: Cleanup on Failure
        if: failure()
        run: |
          echo "‚ùå Workflow failed!"
          echo "üßπ Cleaning up temporary files..."
          rm -rf docs-build current-site hugo-templates products hub-repo
          echo "‚úÖ Cleanup complete"

      - name: Notify on Failure
        if: failure()
        run: |
          echo "::error::Documentation federation deployment failed. Check logs for details."
          echo "::error::Failed job: ${{ github.job }}"
